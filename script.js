// Thay b·∫±ng URL Apps Script c·ªßa b·∫°n
const GOOGLE_SHEET_WEBHOOK_URL = "https://script.google.com/macros/s/AKfycbzO0YNnGfB_E7D73wXrBpr_AyJAvmmuipp68SyuApnhA2t-RpABYobh6RrMEZTYY_7hNg/exec";

function sendOrderToGoogleSheet(order) {
  fetch(GOOGLE_SHEET_WEBHOOK_URL, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(order)
  })
  .then(res => res.ok ? res.text() : Promise.reject(res.status))
  .then(msg => console.log("ƒê√£ g·ª≠i ƒë∆°n l√™n Google Sheets:", msg))
  .catch(err => console.error("L·ªói g·ª≠i ƒë∆°n l√™n Google Sheets:", err));
}
// D·ªØ li·ªáu t·ª´ cf.py
const sizeOptions = ["Size M (chu·∫©n)", "Size L (+5.000ƒë)"];
const drinkOptions = [
  // Cafe
  { group: "C√† ph√™", items: [
    { name: "C√† ph√™ ƒëen ƒë√°/n√≥ng", price: 18000 },
    { name: "C√† ph√™ s·ªØa ƒë√°/n√≥ng", price: 20000 },
    { name: "B·∫°c x·ªâu", price: 22000 },
    { name: "Cold Brew", price: 30000 }
  ]},
  // Tr√† & Tr√† s·ªØa
  { group: "Tr√† & Tr√† s·ªØa", items: [
    { name: "Tr√† ƒë√†o cam s·∫£", price: 28000 },
    { name: "Tr√† chanh m·∫≠t ong", price: 22000 },
    { name: "Tr√† t·∫Øc x√≠ mu·ªôi", price: 20000 },
    { name: "Tr√† s·ªØa tr√¢n ch√¢u", price: 28000 },
    { name: "Matcha Latte", price: 32000 }
  ]},
  // N∆∞·ªõc gi·∫£i kh√°t
  { group: "N∆∞·ªõc gi·∫£i kh√°t", items: [
    { name: "Soda chanh", price: 22000 },
    { name: "Soda vi·ªát qu·∫•t", price: 25000 },
    { name: "N∆∞·ªõc su·ªëi", price: 10000 },
    { name: "Sting/Pepsi/7Up", price: 15000 }
  ]},
  // Sinh t·ªë ‚Äì N∆∞·ªõc √©p
  { group: "Sinh t·ªë ‚Äì N∆∞·ªõc √©p", items: [
    { name: "Sinh t·ªë b∆°", price: 30000 },
    { name: "Sinh t·ªë xo√†i", price: 28000 },
    { name: "Sinh t·ªë d√¢u", price: 28000 },
    { name: "N∆∞·ªõc √©p cam", price: 28000 },
    { name: "N∆∞·ªõc √©p c√† r·ªët", price: 25000 }
  ]}
];
const snackOptions = [
  { name: "Khoai t√¢y chi√™n", price: 25000 },
  { name: "X√∫c x√≠ch chi√™n", price: 25000 },
  { name: "B√°nh tr√°ng tr·ªôn", price: 20000 },
  { name: "Kh√¥ g√† l√° chanh", price: 30000 },
  { name: "M√¨ x√†o b√≤", price: 35000 }
];
const toppingOptions = ["Tr√¢n ch√¢u ƒëen", "Tr√¢n ch√¢u tr·∫Øng", "Th·∫°ch ph√¥ mai", "Th·∫°ch c√† ph√™", "Flan", "Pudding tr·ª©ng"];

const priceTable = {
  size: {"Size M (chu·∫©n)": 0, "Size L (+5.000ƒë)": 5000},
  topping: {"Tr√¢n ch√¢u ƒëen": 5000, "Tr√¢n ch√¢u tr·∫Øng": 5000, "Th·∫°ch ph√¥ mai": 5000, "Th·∫°ch c√† ph√™": 5000, "Flan": 5000, "Pudding tr·ª©ng": 5000},
};

// Gi·ªè h√†ng l∆∞u nhi·ªÅu ƒë∆°n
let orders = [];

// Kh·ªüi t·∫°o select + checkbox
window.onload = () => {
  // Kh·ªüi t·∫°o select n∆∞·ªõc (c√≥ nh√≥m)
  let drinkSel = document.getElementById("drink");
  drinkOptions.forEach(group => {
    let optgroup = document.createElement("optgroup");
    optgroup.label = group.group;
    group.items.forEach(item => {
      let opt = document.createElement("option");
      opt.value = item.name;
      opt.textContent = `${item.name} (${item.price.toLocaleString()}ƒë)`;
      optgroup.appendChild(opt);
    });
    drinkSel.appendChild(optgroup);
  });

  // Kh·ªüi t·∫°o select size
  let sizeSel = document.getElementById("size");
  sizeOptions.forEach(s => sizeSel.add(new Option(s, s)));

  // Kh·ªüi t·∫°o topping
  let toppingDiv = document.getElementById("topping");
  toppingOptions.forEach(t => {
    let cb = document.createElement("input");
    cb.type = "checkbox";
    cb.value = t;
    cb.name = "topping";
    toppingDiv.appendChild(cb);
    toppingDiv.appendChild(document.createTextNode(" " + t));
    toppingDiv.appendChild(document.createElement("br"));
  });

  // Kh·ªüi t·∫°o select ƒÉn v·∫∑t
  let snackSel = document.getElementById("snack");
  snackOptions.forEach(snack => {
    let opt = document.createElement("option");
    opt.value = snack.name;
    opt.textContent = `${snack.name} (${snack.price.toLocaleString()}ƒë)`;
    snackSel.appendChild(opt);
  });

  // Th√™m s·ª± ki·ªán cho n√∫t Thanh to√°n
  const payBtn = document.getElementById("payBtn");
  if (payBtn) {
    payBtn.onclick = () => {
      if (!orders.length) {
        alert("Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o ƒë·ªÉ thanh to√°n!");
        return;
      }
      let totalAll = orders.reduce((sum, order) => sum + calculateTotal(order), 0);
      alert(`C·∫£m ∆°n b·∫°n ƒë√£ thanh to√°n!\nT·ªïng h√≥a ƒë∆°n: ${totalAll.toLocaleString()} VND`);
      orders = [];
      renderBill();
    };
  }
};

function calculateTotal(order) {
  let total = 0;
  // T√¨m gi√° n∆∞·ªõc
  for (const group of drinkOptions) {
    const found = group.items.find(item => item.name === order.drink);
    if (found) {
      total += found.price;
      break;
    }
  }
  // Size
  total += priceTable.size[order.size] || 0;
  // Topping
  order.topping.forEach(t => total += priceTable.topping[t] || 0);
  // ƒÇn v·∫∑t
  if (order.snack) {
    const foundSnack = snackOptions.find(s => s.name === order.snack);
    if (foundSnack) total += foundSnack.price;
  }
  return total;
}

function confirmOrder() {
  let drink = document.getElementById("drink").value;
  let size = document.getElementById("size").value;
  let snack = document.getElementById("snack").value || null;

  let topping = [];
  document.querySelectorAll("input[name='topping']:checked").forEach(cb => topping.push(cb.value));
  if (topping.length > 3) {
    alert("Ch·ªâ ƒë∆∞·ª£c ch·ªçn t·ªëi ƒëa 3 topping!");
    return;
  }

  let order = {drink, size, snack, topping, time: new Date().toLocaleString()};
  orders.push(order);
  sendOrderToGoogleSheet(order);
  renderBill();
}

function renderBill() {
  const container = document.getElementById("bill");
  container.innerHTML = "";
  if (!orders.length) {
    container.innerHTML = '<div class="empty-bill">Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o.<br>Nh·∫•n "X√°c nh·∫≠n ƒë∆°n h√†ng" ƒë·ªÉ th√™m.</div>';
    return;
  }

  let totalAll = 0;
  orders.forEach((order, idx) => {
    let total = calculateTotal(order);
    totalAll += total;

    const card = document.createElement('div');
    card.className = 'order-card';

    const header = document.createElement('div');
    header.className = 'order-header';
    const title = document.createElement('div');
    title.className = 'title';
    title.textContent = `ƒê∆°n h√†ng ${idx+1}`;
    const remove = document.createElement('button');
    remove.className = 'remove-btn';
    remove.textContent = 'X√≥a';
    remove.onclick = () => { deleteOrderAt(idx); };
    header.appendChild(title);
    header.appendChild(remove);

    const items = document.createElement('ul');
    items.className = 'order-items';

    // N∆∞·ªõc
    const drinkLi = document.createElement('li');
    drinkLi.innerHTML = `<span>N∆∞·ªõc</span><span>${order.drink}</span>`;
    items.appendChild(drinkLi);

    // Size
    const sizeLi = document.createElement('li');
    sizeLi.innerHTML = `<span>K√≠ch th∆∞·ªõc</span><span>${order.size}</span>`;
    items.appendChild(sizeLi);

    // Topping
    const toppingLi = document.createElement('li');
    if (order.topping.length) {
      const toppings = order.topping.map(t => `${t}`).join(', ');
      toppingLi.innerHTML = `<span>Topping</span><span>${toppings}</span>`;
    } else {
      toppingLi.innerHTML = `<span>Topping</span><span class="muted">Kh√¥ng ch·ªçn</span>`;
    }
    items.appendChild(toppingLi);

    // ƒÇn v·∫∑t
    const snackLi = document.createElement('li');
    snackLi.innerHTML = `<span>ƒÇn v·∫∑t</span><span>${order.snack ? order.snack : '<span class="muted">Kh√¥ng ch·ªçn</span>'}</span>`;
    items.appendChild(snackLi);

    const totalRow = document.createElement('div');
    totalRow.className = 'order-total';
    totalRow.innerHTML = `<div class="muted">T·ªïng ƒë∆°n</div><div><strong>${total.toLocaleString()} VND</strong></div>`;

    card.appendChild(header);
    card.appendChild(items);
    card.appendChild(totalRow);

    container.appendChild(card);
  });

  const grand = document.createElement('div');
  grand.className = 'grand-total';
  grand.innerHTML = `üí∞ T·ªîNG T·∫§T C·∫¢: ${totalAll.toLocaleString()} VND`;
  container.appendChild(grand);
}

function deleteOrderAt(idx) {
  if (idx >=0 && idx < orders.length) {
    orders.splice(idx, 1);
    renderBill();
    // keep user informed if no orders left
  }
}

function resetForm() {
  document.getElementById("drink").selectedIndex = 0;
  document.getElementById("size").selectedIndex = 0;
  document.getElementById("snack").selectedIndex = 0;
  document.querySelectorAll("input[name='topping'").forEach(cb => cb.checked = false);
}

function showBill() {
  if (!orders.length) {
    alert("Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o!");
  } else {
    renderBill();
  }
}

function deleteOrder() {
  if (!orders.length) {
    alert("Kh√¥ng c√≥ ƒë∆°n h√†ng ƒë·ªÉ x√≥a!");
    return;
  }
  let idx = prompt(`Nh·∫≠p s·ªë ƒë∆°n h√†ng mu·ªën x√≥a (1 - ${orders.length}):`);
  idx = parseInt(idx) - 1;
  if (idx >= 0 && idx < orders.length) {
    orders.splice(idx, 1);
    renderBill();
    alert("ƒê√£ x√≥a ƒë∆°n h√†ng!");
  } else {
    alert("S·ªë kh√¥ng h·ª£p l·ªá!");
  }
}


